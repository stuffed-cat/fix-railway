buildscript {
    repositories {
        maven { 
            url = 'https://maven.minecraftforge.net' 
            metadataSources {
                mavenPom()
                artifact()
            }
            content {
                includeGroup 'net.minecraftforge'
                includeGroup 'net.minecraftforge.gradle'
            }
        }
        mavenCentral()
        gradlePluginPortal()
        maven { url = 'https://libraries.minecraft.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        // 添加更多可能的存储库以解决依赖问题
        maven { url = 'https://maven.fabricmc.net/' }
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.1.0'
group = 'com.example.fixrailway'
archivesBaseName = 'fixrailway'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven { 
        url = 'https://maven.minecraftforge.net/' 
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    mavenCentral()
    // 添加更多存储库
    maven { url = 'https://libraries.minecraft.net/' }
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.fabricmc.net/' }
    maven { url = 'https://jitpack.io' }
    flatDir {
        dirs 'libs'
    }
}

println "Java: ${System.getProperty('java.version')}, JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}), Arch: ${System.getProperty('os.arch')}"

// 设置网络配置
System.setProperty("https.protocols", "TLSv1.2,TLSv1.1,TLSv1")
System.setProperty("javax.net.ssl.trustStoreType", "Windows-ROOT")
System.setProperty("java.net.preferIPv4Stack", "true")

// 禁用SSL证书验证 (仅用于开发环境)
javax.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(new javax.net.ssl.HostnameVerifier() {
    public boolean verify(String hostname, javax.net.ssl.SSLSession sslSession) {
        return true;
    }
})

minecraft {
    mappings channel: 'official', version: '1.19.2'

    // 添加accessTransformer配置，如果需要的话
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            // 添加必要的JVM参数
            jvmArg '-XX:+IgnoreUnrecognizedVMOptions'
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
            jvmArg '-Dfml.ignoreInvalidMinecraftCertificates=true'
            jvmArg '-Dfml.ignorePatchDiscrepancies=true'
            jvmArg '-Dnet.minecraftforge.gradle.check.network=false'
            jvmArg '-Dforge.logging.console.level=debug'
            jvmArg '-Dmixin.debug=true'
            
            mods {
                fixrailway {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            
            // 添加必要的JVM参数
            jvmArg '-XX:+IgnoreUnrecognizedVMOptions'
            jvmArg '-Dfml.ignoreInvalidMinecraftCertificates=true'
            jvmArg '-Dfml.ignorePatchDiscrepancies=true'
            jvmArg '-Dnet.minecraftforge.gradle.check.network=false'
            jvmArg '-Dforge.logging.console.level=debug'
            
            mods {
                fixrailway {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'fixrailway', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                fixrailway {
                    source sourceSets.main
                }
            }
        }
    }
}

// 如果生成的资源目录存在，则包含它
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Add repositories to retrieve artifacts from here
    mavenCentral()
}

dependencies {
    // 指定Minecraft Forge依赖
    minecraft 'net.minecraftforge:forge:1.19.2-43.3.8'

    // 如果需要，添加其他依赖
    // compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    
    // 测试依赖
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

jar {
    manifest {
        attributes([
            "Specification-Title"     : "fixrailway",
            "Specification-Vendor"    : "fixrailwaysareus",
            "Specification-Version"   : "1",
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
            "Implementation-Vendor"   : "fixrailwaysareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// 配置重新混淆 JAR
jar.finalizedBy('reobfJar')

// 配置测试
test {
    useJUnitPlatform()
}

// 配置 Maven 发布
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

// 配置 Java 编译
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:deprecation" // 显示弃用警告
}

// 添加额外任务来清理缓存
task cleanCache(type: Delete) {
    delete fileTree(dir: "${gradle.gradleUserHomeDir}/caches/forge_gradle/", include: "**/*.jar")
    delete fileTree(dir: "${gradle.gradleUserHomeDir}/caches/minecraft/", include: "**/*.jar")
    println "Cache cleaned"
}